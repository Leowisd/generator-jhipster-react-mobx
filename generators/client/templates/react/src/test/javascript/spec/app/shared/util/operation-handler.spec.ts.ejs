<%#
 Copyright 2020 Erki Ehtla

 Licensed under the Apache License, Version 2.0 the "License";
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

import { handleOperation, OperationStatus } from 'app/shared/util/operation-handler';

describe('Operation handler', () => {
  describe('handleOperation', () => {
    it('success', function*() {
      const mockValue = {};
      const operationHandler = jest.fn();
      const iterator = handleOperation(
        {},
        function* mockCallback() {
          return yield Promise.resolve(mockValue);
        },
        operationHandler
      );
      yield iterator;
      expect(operationHandler).toHaveBeenNthCalledWith(1, OperationStatus.IN_PROGRESS);
      expect(operationHandler).toHaveBeenNthCalledWith(2, OperationStatus.SUCCESSFUL, mockValue);
    });

    it('rejection', function*() {
      const mockValue = {};
      const operationHandler = jest.fn();
      const iterator = handleOperation(
        {},
        function* mockCallback() {
          return yield Promise.reject(mockValue);
        },
        operationHandler
      );
      try {
        yield iterator;
      } catch (e) {
        expect(e).toEqual(mockValue);
      }
      expect(operationHandler).toHaveBeenNthCalledWith(1, OperationStatus.IN_PROGRESS);
      expect(operationHandler).toHaveBeenNthCalledWith(2, OperationStatus.ERROR, null, mockValue);
    });

    it('error', function*() {
      const error = new Error('Whoops!');
      const operationHandler = jest.fn();
      const iterator = handleOperation(
        {},
        function* mockCallback() {
          return yield new Promise(() => {
            throw error;
          });
        },
        operationHandler
      );

      try {
        yield iterator;
      } catch (e) {
        expect(e).toEqual(error);
      }
      expect(operationHandler).toHaveBeenNthCalledWith(1, OperationStatus.IN_PROGRESS);
      expect(operationHandler).toHaveBeenNthCalledWith(2, OperationStatus.ERROR, null, error);
    });
  });
});
